import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "../../assets/styles/index.scss";
import "../globals.scss";
import "./loading.scss";
import { ConfigProvider, Layout } from "antd";
import TheFooter from "@/components/Misc.Header/Footer";
import TheHeader from "@/components/Misc.Header/Header";
import { Content } from "antd/es/layout/layout";

import StyledComponentsRegistry from "../../lib/AntdRegistry";
import theme from "./themeConfig";
import { ClerkLoaded, ClerkLoading, ClerkProvider } from "@clerk/nextjs";
import { NextIntlClientProvider } from "next-intl";
import { enUS, ruRU } from "@clerk/localizations";
import { getTranslations } from "next-intl/server";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export function generateStaticParams() {
  return [{ locale: "en" }, { locale: "ru" }];
}

export default async function RootLayout({
  children,
  params: { locale },
}: {
  children: React.ReactNode;
  params: any;
}) {
  const messages = (await import(`../../../locales/${locale}.json`)).default;

  return (
    <NextIntlClientProvider locale={locale} messages={messages}>
      <ClerkProvider localization={locale == "ru" ? ruRU : enUS}>
        <html lang={locale}>
          <body suppressHydrationWarning={true} className={inter.className}>
            <StyledComponentsRegistry>
              <ConfigProvider theme={theme}>
                <LoadingComponent locale={locale} />
                <ClerkLoaded>
                  <Layout>
                    <TheHeader />
                    <Content style={{ padding: "0 0 " }}>{children}</Content>
                    <TheFooter />
                  </Layout>
                </ClerkLoaded>
              </ConfigProvider>
            </StyledComponentsRegistry>
          </body>
        </html>
      </ClerkProvider>
    </NextIntlClientProvider>
  );
}

async function LoadingComponent({ locale }: { locale: string }) {
  const t = await getTranslations({ locale, namespace: "Common" });
  const { colorPrimary } = theme.token!;

  return (
    <ClerkLoading>
      <div className="clerk-loading">
        <h1 style={{ color: colorPrimary }}>
          <span className="let1">l</span>
          <span className="let2">o</span>
          <span className="let3">a</span>
          <span className="let4">d</span>
          <span className="let5">i</span>
          <span className="let6">n</span>
          <span className="let7">g</span>
        </h1>
      </div>
    </ClerkLoading>
  );
}
